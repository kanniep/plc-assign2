/* ----------------------User code--------------------*/

package src;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;


action code {:
  Hashtable table = new Hashtable();
:}

/* ------------Grammar symbol declarations----------- */

terminal                PLUS, MINUS, TIMES, DIVIDE, ASSIGN, LPAREN, RPAREN, SEMI, NEWLINE;
terminal Integer        NUMBER;
terminal Double         REAL;
terminal String         ID;

non terminal ParseTreeNode    StatementList;
non terminal ParseTreeNode    Statement, Expression;
non terminal ParseTreeNode    Term;
non terminal ParseTreeNode    Factor;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;

/* ------------Grammar rules----------- */


StatementList   ::=                             {:  RESULT = new ParseTreeNode(); :}
                | StatementList:sl Statement:s  {:  sl.addNode(s);
                                                    RESULT = sl;
                                                :};

Statement   ::= ID:id ASSIGN Expression:e SEMI  {:  table.put(id, e.getValue());
                                                    RESULT = new ParseTreeNode(id, e);
                                                :}
                | Expression:e SEMI             {:  RESULT = new ParseTreeNode(e, ParseTreeNode.Type.Statement); :}
                | NEWLINE;

/* ----------Infix Notation---------- */
Expression  ::= Expression:e PLUS Term:t        {:  RESULT = new ParseTreeNode(e, ParseTreeNode.Operation.Add, t, ParseTreeNode.Type.Expression); :}
                | Expression:e MINUS Term:t     {:  RESULT = new ParseTreeNode(e, ParseTreeNode.Operation.Minus, t, ParseTreeNode.Type.Expression); :}
                | Term:t                        {:  RESULT = new ParseTreeNode(t, ParseTreeNode.Type.Expression); :};

Term        ::= Term:t TIMES Factor:f           {:  RESULT = new ParseTreeNode(t, ParseTreeNode.Operation.Times, f, ParseTreeNode.Type.Expression); :}
                | Term:t DIVIDE Factor:f        {:  RESULT = new ParseTreeNode(t, ParseTreeNode.Operation.Divide, f, ParseTreeNode.Type.Expression); :}
                | Factor:f                      {:  RESULT = new ParseTreeNode(f, ParseTreeNode.Type.Term); :};


Factor      ::= NUMBER:num                      {:  RESULT = new ParseTreeNode(num); :}
                | REAL:real                     {:  RESULT = new ParseTreeNode(real); :}
                | ID:id                         {:  Number value = (Number) table.get(id);
                                                    if (value == null) {
                                                        throw new IllegalStateException("Undeclared Identifier " + id);
                                                    }
                                                    RESULT = new ParseTreeNode(id, value);
                                                :}
                | LPAREN Expression:e RPAREN    {:  RESULT = new ParseTreeNode(e, ParseTreeNode.Type.Factor); :};
