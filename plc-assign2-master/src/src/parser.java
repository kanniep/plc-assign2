
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 05 04:00:32 ICT 2019
//----------------------------------------------------

package src;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 05 04:00:32 ICT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\002\000\002\002\004\000\002\002" +
    "\004\000\002\003\006\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\003\004\000" +
    "\002\003\011\000\002\003\011\000\002\003\015\000\002" +
    "\003\007\000\002\004\003\000\002\004\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\002\000\002\006\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\062\002\001\004\001\005\001\011\001\013" +
    "\001\014\001\015\001\016\001\017\001\020\001\021\001" +
    "\022\001\023\001\025\001\030\001\032\001\033\001\034" +
    "\001\035\001\036\001\037\001\040\001\041\001\042\001" +
    "\001\002\000\062\002\017\004\uffe8\005\uffe8\011\013\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\012\025\011\030\uffe8\032\007\033\016\034" +
    "\027\035\023\036\021\037\020\040\025\041\014\042\015" +
    "\001\002\000\036\004\uffe4\005\uffe4\006\uffe4\007\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\030\uffe4\001\002\000\006\012\ufff4\030" +
    "\ufff4\001\002\000\004\041\127\001\002\000\032\004\106" +
    "\005\103\012\ufff3\013\113\014\110\015\107\016\112\017" +
    "\111\020\105\021\104\022\114\030\ufff3\001\002\000\004" +
    "\011\075\001\002\000\004\011\063\001\002\000\042\004" +
    "\uffe8\005\uffe8\011\013\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\037\020\040" +
    "\025\041\033\042\015\001\002\000\036\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\056\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\030\uffe1\001\002" +
    "\000\036\004\uffe0\005\uffe0\006\uffe0\007\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\030\uffe0\001\002\000\004\041\052\001\002\000" +
    "\004\002\000\001\002\000\036\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\030\uffe3\001\002\000\004" +
    "\011\046\001\002\000\064\002\uffff\004\uffff\005\uffff\011" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\023\uffff\025\uffff\027\uffff\030\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\uffff\001\002\000\004\041\042\001\002\000" +
    "\036\004\uffe7\005\uffe7\006\037\007\036\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\030\uffe7\001\002\000\036\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\030\uffe2\001\002\000\004" +
    "\030\035\001\002\000\004\041\030\001\002\000\004\010" +
    "\031\001\002\000\042\004\uffe8\005\uffe8\011\013\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\030\uffe8\037\020\040\025\041\033\042\015\001\002" +
    "\000\004\030\034\001\002\000\036\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\030\uffe1\001\002\000" +
    "\064\002\ufffb\004\ufffb\005\ufffb\011\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\025\ufffb\027\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\001" +
    "\002\000\064\002\ufff9\004\ufff9\005\ufff9\011\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\025\ufff9\027\ufff9\030\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\001\002\000\014\011\013\037\020\040\025\041\033" +
    "\042\015\001\002\000\014\011\013\037\020\040\025\041" +
    "\033\042\015\001\002\000\036\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\030\uffe6\001\002\000\036" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\030\uffe5\001\002\000\004\010\043\001\002\000\042\004" +
    "\uffe8\005\uffe8\011\013\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\030\uffe8\037\020\040" +
    "\025\041\033\042\015\001\002\000\004\030\045\001\002" +
    "\000\064\002\ufffa\004\ufffa\005\ufffa\011\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\025\ufffa\027\ufffa\030\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\001\002\000\042\004\uffe8\005\uffe8\011\013\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\037\020\040\025\041\033\042\015\001\002\000" +
    "\004\012\050\001\002\000\004\030\051\001\002\000\064" +
    "\002\ufff5\004\ufff5\005\ufff5\011\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\025\ufff5\027\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\001\002" +
    "\000\004\010\053\001\002\000\042\004\uffe8\005\uffe8\011" +
    "\013\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\030\uffe8\037\020\040\025\041\033\042" +
    "\015\001\002\000\004\030\055\001\002\000\064\002\ufffc" +
    "\004\ufffc\005\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc" +
    "\027\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036" +
    "\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001\002\000\042" +
    "\004\uffe8\005\uffe8\011\013\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\030\uffe8\037\020" +
    "\040\025\041\033\042\015\001\002\000\004\030\060\001" +
    "\002\000\064\002\ufffe\004\ufffe\005\ufffe\011\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\025\ufffe\027\ufffe\030\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042" +
    "\ufffe\001\002\000\004\012\062\001\002\000\036\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\030\uffdf" +
    "\001\002\000\042\004\uffe8\005\uffe8\011\013\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\037\020\040\025\041\033\042\015\001\002\000" +
    "\004\012\065\001\002\000\004\026\066\001\002\000\062" +
    "\004\001\005\001\011\001\013\001\014\001\015\001\016" +
    "\001\017\001\020\001\021\001\022\001\023\001\025\001" +
    "\027\001\030\001\032\001\033\001\034\001\035\001\036" +
    "\001\037\001\040\001\041\001\042\001\001\002\000\062" +
    "\004\uffe8\005\uffe8\011\013\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\012\025\011" +
    "\027\070\030\uffe8\032\007\033\016\034\027\035\023\036" +
    "\021\037\020\040\025\041\014\042\015\001\002\000\066" +
    "\002\ufff7\004\ufff7\005\ufff7\011\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\071\025\ufff7\027\ufff7\030\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\001\002\000\004\026\072\001\002\000\062\004\001\005" +
    "\001\011\001\013\001\014\001\015\001\016\001\017\001" +
    "\020\001\021\001\022\001\023\001\025\001\027\001\030" +
    "\001\032\001\033\001\034\001\035\001\036\001\037\001" +
    "\040\001\041\001\042\001\001\002\000\062\004\uffe8\005" +
    "\uffe8\011\013\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\012\025\011\027\074\030" +
    "\uffe8\032\007\033\016\034\027\035\023\036\021\037\020" +
    "\040\025\041\014\042\015\001\002\000\064\002\ufff6\004" +
    "\ufff6\005\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\025\ufff6\027" +
    "\ufff6\030\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\001\002\000\042\004" +
    "\uffe8\005\uffe8\011\013\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\037\020\040" +
    "\025\041\033\042\015\001\002\000\004\012\077\001\002" +
    "\000\004\026\100\001\002\000\062\004\001\005\001\011" +
    "\001\013\001\014\001\015\001\016\001\017\001\020\001" +
    "\021\001\022\001\023\001\025\001\027\001\030\001\032" +
    "\001\033\001\034\001\035\001\036\001\037\001\040\001" +
    "\041\001\042\001\001\002\000\062\004\uffe8\005\uffe8\011" +
    "\013\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\012\025\011\027\102\030\uffe8\032" +
    "\007\033\016\034\027\035\023\036\021\037\020\040\025" +
    "\041\014\042\015\001\002\000\064\002\ufff8\004\ufff8\005" +
    "\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8\027\ufff8\030" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\001\002\000\014\011\013\037" +
    "\020\040\025\041\033\042\015\001\002\000\024\004\uffe8" +
    "\005\uffe8\011\013\012\uffe8\030\uffe8\037\020\040\025\041" +
    "\033\042\015\001\002\000\024\004\uffe8\005\uffe8\011\013" +
    "\012\uffe8\030\uffe8\037\020\040\025\041\033\042\015\001" +
    "\002\000\014\011\013\037\020\040\025\041\033\042\015" +
    "\001\002\000\024\004\uffe8\005\uffe8\011\013\012\uffe8\030" +
    "\uffe8\037\020\040\025\041\033\042\015\001\002\000\024" +
    "\004\uffe8\005\uffe8\011\013\012\uffe8\030\uffe8\037\020\040" +
    "\025\041\033\042\015\001\002\000\024\004\uffe8\005\uffe8" +
    "\011\013\012\uffe8\030\uffe8\037\020\040\025\041\033\042" +
    "\015\001\002\000\024\004\uffe8\005\uffe8\011\013\012\uffe8" +
    "\030\uffe8\037\020\040\025\041\033\042\015\001\002\000" +
    "\024\004\uffe8\005\uffe8\011\013\012\uffe8\030\uffe8\037\020" +
    "\040\025\041\033\042\015\001\002\000\024\004\uffe8\005" +
    "\uffe8\011\013\012\uffe8\030\uffe8\037\020\040\025\041\033" +
    "\042\015\001\002\000\012\004\106\005\103\012\uffeb\030" +
    "\uffeb\001\002\000\012\004\106\005\103\012\ufff2\030\ufff2" +
    "\001\002\000\012\004\106\005\103\012\uffed\030\uffed\001" +
    "\002\000\012\004\106\005\103\012\uffef\030\uffef\001\002" +
    "\000\012\004\106\005\103\012\ufff1\030\ufff1\001\002\000" +
    "\012\004\106\005\103\012\ufff0\030\ufff0\001\002\000\036" +
    "\004\uffea\005\uffea\006\037\007\036\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\030\uffea\001\002\000\012\004\106\005\103\012\uffee\030" +
    "\uffee\001\002\000\012\004\106\005\103\012\uffec\030\uffec" +
    "\001\002\000\036\004\uffe9\005\uffe9\006\037\007\036\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\030\uffe9\001\002\000\004\010\130\001" +
    "\002\000\042\004\uffe8\005\uffe8\011\013\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\030" +
    "\uffe8\037\020\040\025\041\033\042\015\001\002\000\004" +
    "\030\132\001\002\000\064\002\ufffd\004\ufffd\005\ufffd\011" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\025\ufffd\027\ufffd\030\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\002\003\001\001\000\016\003\021\004" +
    "\025\005\005\006\007\010\023\011\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\060" +
    "\005\005\006\007\010\023\011\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\031\005\005\006\007\010\023\011\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\040\001\001\000\004\011\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\043\005\005\006\007\010\023\011\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\046\005" +
    "\005\006\007\010\023\011\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\053\005\005\006\007\010\023\011\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\056\005" +
    "\005\006\007\010\023\011\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\063\005\005\006\007\010\023\011\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\066\001" +
    "\001\000\016\003\021\004\025\005\005\006\007\010\023" +
    "\011\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\072\001\001\000\016\003\021\004\025\005\005" +
    "\006\007\010\023\011\004\001\001\000\002\001\001\000" +
    "\014\004\075\005\005\006\007\010\023\011\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\100\001" +
    "\001\000\016\003\021\004\025\005\005\006\007\010\023" +
    "\011\004\001\001\000\002\001\001\000\006\010\125\011" +
    "\004\001\001\000\010\006\124\010\023\011\004\001\001" +
    "\000\010\006\123\010\023\011\004\001\001\000\006\010" +
    "\122\011\004\001\001\000\010\006\121\010\023\011\004" +
    "\001\001\000\010\006\120\010\023\011\004\001\001\000" +
    "\010\006\117\010\023\011\004\001\001\000\010\006\116" +
    "\010\023\011\004\001\001\000\010\006\115\010\023\011" +
    "\004\001\001\000\010\006\114\010\023\011\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\130\005\005\006\007" +
    "\010\023\011\004\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Factor ::= LPAREN Expression RPAREN 
            {
              FactorNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new FactorNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Factor ::= BOOLEAN 
            {
              FactorNode RESULT =null;
		int Booleanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Booleanright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean Boolean = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FactorNode(new TerminalNode(Boolean)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Factor ::= ID 
            {
              FactorNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FactorNode(new TerminalNode(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Factor ::= REAL 
            {
              FactorNode RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FactorNode(new TerminalNode(real)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Factor ::= NUMBER 
            {
              FactorNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FactorNode(new TerminalNode(num)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Term ::= Factor 
            {
              TermNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode f = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new TermNode(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Term ::= Term DIVIDE Factor 
            {
              TermNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode f = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new TermNode(sym.DIVIDE, t, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Term ::= Term TIMES Factor 
            {
              TermNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode f = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new TermNode(sym.TIMES, t, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Arithmetic_Expression ::= Term 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Arithmetic_Expression ::= 
            {
              ExpressionNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Arithmetic_Expression ::= Arithmetic_Expression MINUS Term 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.MINUS, e, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Arithmetic_Expression ::= Arithmetic_Expression PLUS Term 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.PLUS, e, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Comparison_Expression ::= Arithmetic_Expression OR Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.OR, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Comparison_Expression ::= Arithmetic_Expression AND Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.AND, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Comparison_Expression ::= Arithmetic_Expression NE Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.NE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Comparison_Expression ::= Arithmetic_Expression GE Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.GE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Comparison_Expression ::= Arithmetic_Expression GT Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.GT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Comparison_Expression ::= Arithmetic_Expression EQ Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.EQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Comparison_Expression ::= Arithmetic_Expression LE Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.LE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Comparison_Expression ::= Arithmetic_Expression LT Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.LT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expression ::= Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expression ::= Comparison_Expression 
            {
              ExpressionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= PRINT LPAREN Expression RPAREN SEMI 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new StatementNode(StatementNode.StatementType.Print, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= IF LPAREN Expression RPAREN LBRACKET StatementList RBRACKET ELSE LBRACKET StatementList RBRACKET 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(e, s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= IF LPAREN Expression RPAREN LBRACKET StatementList RBRACKET 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(sym.IF, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= WHILE LPAREN Expression RPAREN LBRACKET StatementList RBRACKET 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(sym.WHILE, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= Expression SEMI 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= BOOL ID ASSIGN Expression SEMI 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= DOUBLE ID ASSIGN Expression SEMI 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement ::= FLOAT ID ASSIGN Expression SEMI 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement ::= INT ID ASSIGN Expression SEMI 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= ID ASSIGN Expression SEMI 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StatementList ::= StatementList Statement 
            {
              StatementNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new StatementNode(sl, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= StatementList EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode start_val = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // StatementList ::= 
            {
              StatementNode RESULT =null;
		  RESULT = new StatementNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

