
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 06 16:24:42 ICT 2019
//----------------------------------------------------

package src;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 06 16:24:42 ICT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\002\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\003\007\000\002\003\006" +
    "\000\002\003\004\000\002\003\011\000\002\003\011\000" +
    "\002\003\015\000\002\003\007\000\002\003\012\000\002" +
    "\003\011\000\002\003\007\000\002\003\006\000\002\004" +
    "\006\000\002\004\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\011\005\000" +
    "\002\011\003\000\002\005\003\000\002\005\003\000\002" +
    "\010\005\000\002\010\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\040\002\001\011\001\023\001\025\001\032" +
    "\001\033\001\034\001\035\001\036\001\037\001\040\001" +
    "\041\001\042\001\043\001\044\001\001\002\000\040\002" +
    "\022\011\016\023\015\025\013\032\014\033\023\034\006" +
    "\035\033\036\020\037\012\040\021\041\031\042\025\043" +
    "\011\044\017\001\002\000\040\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\030\uffda\031\uffda\001\002" +
    "\000\004\044\ufff0\001\002\000\014\012\uffea\021\150\022" +
    "\151\030\uffea\031\uffea\001\002\000\034\004\133\005\135" +
    "\012\uffe0\013\131\014\134\015\130\016\137\017\132\020" +
    "\136\021\uffe0\022\uffe0\030\uffe0\031\uffe0\001\002\000\040" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\030\uffd6\031\uffd6\001\002\000\004\044\uffed\001\002\000" +
    "\004\011\122\001\002\000\004\044\103\001\002\000\004" +
    "\011\071\001\002\000\016\011\016\040\021\041\031\042" +
    "\025\043\011\044\037\001\002\000\040\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\054\011\053\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\030\uffd5" +
    "\001\002\000\004\044\uffee\001\002\000\040\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\030\uffd9\031" +
    "\uffd9\001\002\000\004\002\000\001\002\000\004\011\047" +
    "\001\002\000\042\002\uffff\011\uffff\023\uffff\025\uffff\027" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\001\002\000" +
    "\040\004\uffd7\005\uffd7\006\uffd7\007\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\030\uffd7\031\uffd7\001\002\000\004\044\042\001\002" +
    "\000\040\004\uffdd\005\uffdd\006\036\007\035\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\030\uffdd\031\uffdd\001\002\000\010\012\uffe9\030" +
    "\uffe9\031\uffe9\001\002\000\040\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\030\uffd8\031\uffd8\001\002" +
    "\000\004\030\034\001\002\000\004\044\uffef\001\002\000" +
    "\042\002\ufffb\011\ufffb\023\ufffb\025\ufffb\027\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002\000\016\011\016" +
    "\040\021\041\031\042\025\043\011\044\037\001\002\000" +
    "\016\011\016\040\021\041\031\042\025\043\011\044\037" +
    "\001\002\000\040\004\uffd5\005\uffd5\006\uffd5\007\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\030\uffd5\031\uffd5\001\002\000\040\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\030" +
    "\uffdc\031\uffdc\001\002\000\040\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\030\uffdb\031\uffdb\001\002" +
    "\000\006\010\044\030\043\001\002\000\042\002\ufffe\011" +
    "\ufffe\023\ufffe\025\ufffe\027\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\001\002\000\016\011\016\040\021\041\031" +
    "\042\025\043\011\044\037\001\002\000\004\030\046\001" +
    "\002\000\042\002\ufffd\011\ufffd\023\ufffd\025\ufffd\027\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\001\002\000\016" +
    "\011\016\040\021\041\031\042\025\043\011\044\037\001" +
    "\002\000\004\012\051\001\002\000\004\030\052\001\002" +
    "\000\042\002\ufff7\011\ufff7\023\ufff7\025\ufff7\027\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\001\002\000\020\011" +
    "\016\012\061\040\021\041\031\042\025\043\011\044\037" +
    "\001\002\000\016\011\016\040\021\041\031\042\025\043" +
    "\011\044\037\001\002\000\004\030\056\001\002\000\042" +
    "\002\ufffc\011\ufffc\023\ufffc\025\ufffc\027\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\001\002\000\004\012\065\001" +
    "\002\000\006\012\uffeb\031\063\001\002\000\004\030\062" +
    "\001\002\000\042\002\ufff3\011\ufff3\023\ufff3\025\ufff3\027" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002\000" +
    "\016\011\016\040\021\041\031\042\025\043\011\044\037" +
    "\001\002\000\004\012\uffec\001\002\000\004\030\066\001" +
    "\002\000\042\002\ufff4\011\ufff4\023\ufff4\025\ufff4\027\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\001\002\000\004" +
    "\012\070\001\002\000\040\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\030\uffd4\031\uffd4\001\002\000" +
    "\016\011\016\040\021\041\031\042\025\043\011\044\037" +
    "\001\002\000\004\012\073\001\002\000\004\026\074\001" +
    "\002\000\040\011\001\023\001\025\001\027\001\032\001" +
    "\033\001\034\001\035\001\036\001\037\001\040\001\041" +
    "\001\042\001\043\001\044\001\001\002\000\040\011\016" +
    "\023\015\025\013\027\076\032\014\033\023\034\006\035" +
    "\033\036\020\037\012\040\021\041\031\042\025\043\011" +
    "\044\017\001\002\000\044\002\ufff9\011\ufff9\023\ufff9\024" +
    "\077\025\ufff9\027\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\001\002\000\004\026\100\001\002\000\040\011\001" +
    "\023\001\025\001\027\001\032\001\033\001\034\001\035" +
    "\001\036\001\037\001\040\001\041\001\042\001\043\001" +
    "\044\001\001\002\000\040\011\016\023\015\025\013\027" +
    "\102\032\014\033\023\034\006\035\033\036\020\037\012" +
    "\040\021\041\031\042\025\043\011\044\017\001\002\000" +
    "\042\002\ufff8\011\ufff8\023\ufff8\025\ufff8\027\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\001\002\000\004\011\104" +
    "\001\002\000\014\012\106\034\006\035\033\036\020\037" +
    "\012\001\002\000\004\012\116\001\002\000\004\026\113" +
    "\001\002\000\004\044\110\001\002\000\006\012\ufff1\031" +
    "\111\001\002\000\012\034\006\035\033\036\020\037\012" +
    "\001\002\000\004\012\ufff2\001\002\000\040\011\001\023" +
    "\001\025\001\027\001\032\001\033\001\034\001\035\001" +
    "\036\001\037\001\040\001\041\001\042\001\043\001\044" +
    "\001\001\002\000\040\011\016\023\015\025\013\027\115" +
    "\032\014\033\023\034\006\035\033\036\020\037\012\040" +
    "\021\041\031\042\025\043\011\044\017\001\002\000\042" +
    "\002\ufff5\011\ufff5\023\ufff5\025\ufff5\027\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\001\002\000\004\026\117\001" +
    "\002\000\040\011\001\023\001\025\001\027\001\032\001" +
    "\033\001\034\001\035\001\036\001\037\001\040\001\041" +
    "\001\042\001\043\001\044\001\001\002\000\040\011\016" +
    "\023\015\025\013\027\121\032\014\033\023\034\006\035" +
    "\033\036\020\037\012\040\021\041\031\042\025\043\011" +
    "\044\017\001\002\000\042\002\ufff6\011\ufff6\023\ufff6\025" +
    "\ufff6\027\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\001" +
    "\002\000\016\011\016\040\021\041\031\042\025\043\011" +
    "\044\037\001\002\000\004\012\124\001\002\000\004\026" +
    "\125\001\002\000\040\011\001\023\001\025\001\027\001" +
    "\032\001\033\001\034\001\035\001\036\001\037\001\040" +
    "\001\041\001\042\001\043\001\044\001\001\002\000\040" +
    "\011\016\023\015\025\013\027\127\032\014\033\023\034" +
    "\006\035\033\036\020\037\012\040\021\041\031\042\025" +
    "\043\011\044\017\001\002\000\042\002\ufffa\011\ufffa\023" +
    "\ufffa\025\ufffa\027\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\001\002\000\016\011\016\040\021\041\031\042\025" +
    "\043\011\044\037\001\002\000\016\011\016\040\021\041" +
    "\031\042\025\043\011\044\037\001\002\000\016\011\016" +
    "\040\021\041\031\042\025\043\011\044\037\001\002\000" +
    "\016\011\016\040\021\041\031\042\025\043\011\044\037" +
    "\001\002\000\016\011\016\040\021\041\031\042\025\043" +
    "\011\044\037\001\002\000\016\011\016\040\021\041\031" +
    "\042\025\043\011\044\037\001\002\000\016\011\016\040" +
    "\021\041\031\042\025\043\011\044\037\001\002\000\016" +
    "\011\016\040\021\041\031\042\025\043\011\044\037\001" +
    "\002\000\020\004\133\005\135\012\uffe1\021\uffe1\022\uffe1" +
    "\030\uffe1\031\uffe1\001\002\000\020\004\133\005\135\012" +
    "\uffe2\021\uffe2\022\uffe2\030\uffe2\031\uffe2\001\002\000\040" +
    "\004\uffde\005\uffde\006\036\007\035\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\030\uffde\031\uffde\001\002\000\020\004\133\005\135\012" +
    "\uffe5\021\uffe5\022\uffe5\030\uffe5\031\uffe5\001\002\000\040" +
    "\004\uffdf\005\uffdf\006\036\007\035\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\030\uffdf\031\uffdf\001\002\000\020\004\133\005\135\012" +
    "\uffe3\021\uffe3\022\uffe3\030\uffe3\031\uffe3\001\002\000\020" +
    "\004\133\005\135\012\uffe6\021\uffe6\022\uffe6\030\uffe6\031" +
    "\uffe6\001\002\000\020\004\133\005\135\012\uffe4\021\uffe4" +
    "\022\uffe4\030\uffe4\031\uffe4\001\002\000\016\011\016\040" +
    "\021\041\031\042\025\043\011\044\037\001\002\000\016" +
    "\011\016\040\021\041\031\042\025\043\011\044\037\001" +
    "\002\000\010\012\uffe7\030\uffe7\031\uffe7\001\002\000\010" +
    "\012\uffe8\030\uffe8\031\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\002\003\001\001\000\022\003\023\005" +
    "\031\006\006\007\007\010\027\012\026\013\004\014\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\066\006\006\007\007\010\027\012\026\013\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\040\001\001\000" +
    "\004\013\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\044\006\006\007\007\010\027\012\026\013\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\047\006\006\007\007\010\027\012\026\013\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\057\006\006\007\007\010\027\011\056\012\026" +
    "\013\004\001\001\000\016\005\054\006\006\007\007\010" +
    "\027\012\026\013\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\057\006\006\007\007" +
    "\010\027\011\063\012\026\013\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\071\006\006\007\007\010" +
    "\027\012\026\013\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\074\001\001\000\022\003\023\005" +
    "\031\006\006\007\007\010\027\012\026\013\004\014\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\100\001\001\000\022\003\023\005\031\006\006\007\007" +
    "\010\027\012\026\013\004\014\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\104\014\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\111\014\106\001\001\000\002" +
    "\001\001\000\004\002\113\001\001\000\022\003\023\005" +
    "\031\006\006\007\007\010\027\012\026\013\004\014\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\117\001\001\000\022\003\023\005\031\006\006\007\007" +
    "\010\027\012\026\013\004\014\025\001\001\000\002\001" +
    "\001\000\016\005\122\006\006\007\007\010\027\012\026" +
    "\013\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\125\001\001\000\022\003\023\005\031\006\006" +
    "\007\007\010\027\012\026\013\004\014\025\001\001\000" +
    "\002\001\001\000\010\007\146\012\026\013\004\001\001" +
    "\000\010\007\145\012\026\013\004\001\001\000\010\007" +
    "\144\012\026\013\004\001\001\000\006\012\143\013\004" +
    "\001\001\000\010\007\142\012\026\013\004\001\001\000" +
    "\006\012\141\013\004\001\001\000\010\007\140\012\026" +
    "\013\004\001\001\000\010\007\137\012\026\013\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\152\007\007" +
    "\012\026\013\004\001\001\000\012\006\151\007\007\012" +
    "\026\013\004\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Factor ::= LPAREN Expression RPAREN 
            {
              FactorNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new FactorNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Factor ::= ID 
            {
              FactorNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FactorNode(new TerminalNode(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Factor ::= CHAR 
            {
              FactorNode RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FactorNode(new TerminalNode(ch)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Factor ::= BOOL 
            {
              FactorNode RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FactorNode(new TerminalNode(bool)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Factor ::= REAL 
            {
              FactorNode RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FactorNode(new TerminalNode(real)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Factor ::= NUMBER 
            {
              FactorNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FactorNode(new TerminalNode(num)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Term ::= Factor 
            {
              TermNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode f = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new TermNode(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Term ::= Term DIVIDE Factor 
            {
              TermNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode f = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new TermNode(sym.DIVIDE, t, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Term ::= Term TIMES Factor 
            {
              TermNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FactorNode f = (FactorNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new TermNode(sym.TIMES, t, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Arithmetic_Expression ::= Term 
            {
              ExpressionNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic_Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Arithmetic_Expression ::= Arithmetic_Expression MINUS Term 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.MINUS, e, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic_Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Arithmetic_Expression ::= Arithmetic_Expression PLUS Term 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermNode t = (TermNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.PLUS, e, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arithmetic_Expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Comparison_Expression ::= Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Comparison_Expression ::= Arithmetic_Expression NE Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.NE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Comparison_Expression ::= Arithmetic_Expression GE Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.GE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Comparison_Expression ::= Arithmetic_Expression GT Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.GT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Comparison_Expression ::= Arithmetic_Expression EQ Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.EQ, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Comparison_Expression ::= Arithmetic_Expression LE Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.LE, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Comparison_Expression ::= Arithmetic_Expression LT Arithmetic_Expression 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.LT, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison_Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Logical_Expression ::= Comparison_Expression OR Comparison_Expression 
            {
              ExpressionNode RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode c1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode c2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.OR, c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logical_Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Logical_Expression ::= Comparison_Expression AND Comparison_Expression 
            {
              ExpressionNode RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode c1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode c2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(sym.AND, c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logical_Expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= Logical_Expression 
            {
              ExpressionNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= Comparison_Expression 
            {
              ExpressionNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode c = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ExpressionList ::= Expression 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExpressionList ::= Expression COMMA ExpressionList 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode el = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpressionNode(e, el); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VariableType ::= CHARACTER 
            {
              Object RESULT =null;
		 RESULT = sym.CHARACTER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VariableType ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = sym.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VariableType ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = sym.DOUBLE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VariableType ::= INT 
            {
              Object RESULT =null;
		 RESULT = sym.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableType",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FunctionParameter ::= VariableType ID 
            {
              StatementNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatementNode(sym.FUNCTION, (int) v, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionParameter",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FunctionParameter ::= VariableType ID COMMA FunctionParameter 
            {
              StatementNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode p = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatementNode(sym.FUNCTION, (int) v, id, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionParameter",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= ID LPAREN RPAREN SEMI 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT = new StatementNode(id, "eieigum"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= ID LPAREN ExpressionList RPAREN SEMI 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new StatementNode(e, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= FUNCTION ID LPAREN RPAREN LBRACKET StatementList RBRACKET 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(sym.FUNCTION, id, s1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= FUNCTION ID LPAREN FunctionParameter RPAREN LBRACKET StatementList RBRACKET 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementNode param = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(sym.FUNCTION, id, (StatementNode) param, s1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= PRINT LPAREN Expression RPAREN SEMI 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new StatementNode(StatementNode.StatementType.Print, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= IF LPAREN Expression RPAREN LBRACKET StatementList RBRACKET ELSE LBRACKET StatementList RBRACKET 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(e, s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= IF LPAREN Expression RPAREN LBRACKET StatementList RBRACKET 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(sym.IF, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= WHILE LPAREN Expression RPAREN LBRACKET StatementList RBRACKET 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(sym.WHILE, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= Expression SEMI 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement ::= ID ASSIGN Expression SEMI 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement ::= VariableType ID ASSIGN Expression SEMI 
            {
              StatementNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode((int) v, id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= VariableType ID SEMI 
            {
              StatementNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new StatementNode((int) v, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StatementList ::= StatementList Statement 
            {
              StatementNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode sl = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new StatementNode(sl, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= StatementList EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode start_val = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // StatementList ::= 
            {
              StatementNode RESULT =null;
		  RESULT = new StatementNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

