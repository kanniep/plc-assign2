
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 22 14:21:21 ICT 2019
//----------------------------------------------------

package src;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 22 14:21:21 ICT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\002\000\002\002\004\000\002\002" +
    "\004\000\002\003\006\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\016\002\001\011\001\014\001\015\001\016" +
    "\001\017\001\001\002\000\016\002\006\011\016\014\015" +
    "\015\005\016\013\017\012\001\002\000\016\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\012\ufff5\013\ufff5\001\002\000\004" +
    "\002\000\001\002\000\010\004\022\005\023\013\035\001" +
    "\002\000\016\002\uffff\011\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\001\002\000\016\004\ufff9\005\ufff9\006\026\007" +
    "\025\012\ufff9\013\ufff9\001\002\000\016\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\032\013\ufff3\001\002\000\016\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\012\ufff4\013\ufff4\001\002" +
    "\000\016\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\013" +
    "\ufff6\001\002\000\016\002\ufffc\011\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\001\002\000\012\011\016\015\005\016" +
    "\013\017\017\001\002\000\016\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\012\ufff3\013\ufff3\001\002\000\010\004\022\005" +
    "\023\012\021\001\002\000\016\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\012\ufff2\013\ufff2\001\002\000\012\011\016\015" +
    "\005\016\013\017\017\001\002\000\012\011\016\015\005" +
    "\016\013\017\017\001\002\000\016\004\ufffa\005\ufffa\006" +
    "\026\007\025\012\ufffa\013\ufffa\001\002\000\012\011\016" +
    "\015\005\016\013\017\017\001\002\000\012\011\016\015" +
    "\005\016\013\017\017\001\002\000\016\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\012\ufff8\013\ufff8\001\002\000\016\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\012\ufff7\013\ufff7\001\002" +
    "\000\016\004\ufffb\005\ufffb\006\026\007\025\012\ufffb\013" +
    "\ufffb\001\002\000\012\011\016\015\005\016\013\017\017" +
    "\001\002\000\010\004\022\005\023\013\034\001\002\000" +
    "\016\002\ufffe\011\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\001\002\000\016\002\ufffd\011\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\002\003\001\001\000\012\003\007\004" +
    "\006\005\010\006\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\017\005\010\006\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\030\006\013\001\001\000\006\005\023\006" +
    "\013\001\001\000\002\001\001\000\004\006\027\001\001" +
    "\000\004\006\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\032\005\010\006\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  Hashtable table = new Hashtable();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Factor ::= LPAREN Expression RPAREN 
            {
              ParseTreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParseTreeNode e = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ParseTreeNode(e, ParseTreeNode.Type.Factor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Factor ::= ID 
            {
              ParseTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Number value = (Number) table.get(id);
                                                    if (value == null) {
                                                        throw new IllegalStateException("Undeclared Identifier " + id);
                                                    }
                                                    RESULT = new ParseTreeNode(id, value);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Factor ::= REAL 
            {
              ParseTreeNode RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParseTreeNode(real); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Factor ::= NUMBER 
            {
              ParseTreeNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParseTreeNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Term ::= Factor 
            {
              ParseTreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParseTreeNode f = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParseTreeNode(f, ParseTreeNode.Type.Term); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Term ::= Term DIVIDE Factor 
            {
              ParseTreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParseTreeNode t = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParseTreeNode f = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParseTreeNode(t, ParseTreeNode.Operation.Divide, f, ParseTreeNode.Type.Expression); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Term ::= Term TIMES Factor 
            {
              ParseTreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParseTreeNode t = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParseTreeNode f = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParseTreeNode(t, ParseTreeNode.Operation.Times, f, ParseTreeNode.Type.Expression); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression ::= Term 
            {
              ParseTreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParseTreeNode t = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParseTreeNode(t, ParseTreeNode.Type.Expression); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expression ::= Expression MINUS Term 
            {
              ParseTreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParseTreeNode e = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParseTreeNode t = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParseTreeNode(e, ParseTreeNode.Operation.Minus, t, ParseTreeNode.Type.Expression); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expression ::= Expression PLUS Term 
            {
              ParseTreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParseTreeNode e = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParseTreeNode t = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ParseTreeNode(e, ParseTreeNode.Operation.Add, t, ParseTreeNode.Type.Expression); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement ::= NEWLINE 
            {
              ParseTreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement ::= Expression SEMI 
            {
              ParseTreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParseTreeNode e = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ParseTreeNode(e, ParseTreeNode.Type.Statement); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= ID ASSIGN Expression SEMI 
            {
              ParseTreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParseTreeNode e = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  table.put(id, e.getValue());
                                                    RESULT = new ParseTreeNode(id, e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StatementList ::= StatementList Statement 
            {
              ParseTreeNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParseTreeNode sl = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParseTreeNode s = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  sl.addNode(s);
                                                    RESULT = sl;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= StatementList EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParseTreeNode start_val = (ParseTreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // StatementList ::= 
            {
              ParseTreeNode RESULT =null;
		  RESULT = new ParseTreeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

